name: mipsel_24kc

on:
  #push:
    #branches: [ master ]
  #pull_request:
    #branches: [ master ]
  watch:
    types: started
  #schedule:
    #- cron:  '0 0 28-31 * *'

jobs:
  build:
    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id
    
    env:
      URL: https://downloads.openwrt.org/snapshots/targets/ramips/mt7621/openwrt-sdk-ramips-mt7621_gcc-8.4.0_musl.Linux-x86_64.tar.xz #需要修改

    
    steps:

    - name: Install dependencies
      run: |
       # https://openwrt.org/docs/guide-developer/build-system/install-buildsystem
        sudo -E apt-get -qq update
        sudo -E apt-get -y install subversion build-essential libncurses5-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        
    - name: Install UPX
      run: |
        cd /tmp
        latest_version=$(wget -qO- https://api.github.com/repos/upx/upx/releases/latest | grep 'tag_name' | cut -d\" -f4)
        [ -z ${latest_version} ]&&exit 127
        wget --quiet --continue --show-progress https://github.com/upx/upx/releases/download/$latest_version/upx-${latest_version:1}-amd64_linux.tar.xz
        tar xvJf upx*-amd64_linux.tar.xz
        sudo mv -f upx-*-amd64_linux/upx /usr/local/bin
        rm -rf upx*
        
    - name: Prepare Golang
      run: |
        cd /tmp
        #Download Latest Go
        echo "Finding latest version of Go for AMD64..."
        latest_version="$(wget -qO- https://golang.org/dl/|grep 'download downloadBox' | grep -oP '\d+\.\d+(\.\d+)?' | head -n 1)"
        [ -z ${latest_version} ]&&exit 127
        echo "Downloading latest Go for AMD64: ${latest_version}"
        wget --quiet --continue --show-progress https://dl.google.com/go/go${latest_version}.linux-amd64.tar.gz
        [ $? -ne 0 ]&&echo "下载Golang工具链失败!"&&exit 127
        sudo tar -C /usr/local -xzf go${latest_version}.linux-amd64.tar.gz
        [ $? -ne 0 ]&&echo "解压Golang工具链失败!"&&exit 127
        rm -f go${latest_version}.linux-amd64.tar.gz
        
    - name: Prepare Toolchain
      run: |
        cd /tmp
        #wget --no-check-certificate --quiet --continue --show-progress $(wget -qO- ${URL%/*} | grep -oP "openwrt\-sdk\-(\w|.|-)+?\.tar\.xz" | head -n 1)
        wget --no-check-certificate --quiet --continue --show-progress $URL
        [ $? -ne 0 ]&&echo "下载工具链失败!"&&exit 127
        tar xvJf openwrt-sdk-*.tar.xz
        [ $? -ne 0 ]&&echo "解压工具链失败!"&&exit 127
        rm -f ${URL##*/}

    - name: Build
      run: |
        cd /tmp #路径过长容易报错。https://forum.openwrt.org/t/buid-package-uclibc-failed-by-using-openwrt-sdk/64377
        cores=$(cat /proc/cpuinfo|grep processor|wc -l)
        dirn=$(pwd)
        dirn1=${URL##*/}
        dirn1=${dirn1%*${dirn1:(-7)}} 
        if [ -d ${dirn1} ]; then
          echo "#工具链解压文件夹 ${dirn1}"
        else
          echo "没有识别工具链解压文件夹!"
          exit 127
        fi
        cd ${dirn1}
        for i in staging_dir/* ;do
          [[ ${i##*/} == "toolchain-"*_gcc* && -d $i ]]&&dirn2=${i##*/}
        done
        if [ ${dirn2} ]; then
          echo "#编译器存放文件夹 ${dirn2}"
        else
          echo "没有识别出编译器存放文件夹!"
          exit 127
        fi
        garch=${dirn2/toolchain-/}
        garch=${garch%_gcc*}
        if [ "$garch" ]; then
          echo "#处理器平台架构为 ${garch}"
        else
          echo "没有识别出处理器平台架构!"
          exit 127
        fi
        for i in staging_dir/${dirn2}/bin/*-gcc; do
          target_host=$(echo ${i##*/}|grep -oP "\w+\-\w+\-\w+")
        done
        if [ ${target_host} ]; then
          echo "#编译器目标主机 ${target_host}"
        else
          echo "没有识别出编译器!"
          exit 127
        fi
        export PATH=$PATH:/usr/local/go/bin:${dirn}/${dirn1}/staging_dir/${dirn2}/bin
        export STAGING_DIR=${dirn}/${dirn1}
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        wget --no-check-certificate --quiet --continue --show-progress --output-document='.config' ${URL%/*}/config.buildinfo
        [ $? -ne 0 ]&&echo "下载.config失败!"&&exit 127
        [ ! -d feeds/luci/applications ]&&echo "没有找到 feeds/luci/applications 路径!"&&exit 127
        echo "克隆 luci-app-passwall-plus 中..."
        git clone https://github.com/yiguihai/luci-app-passwall-plus feeds/luci/applications/luci-app-passwall-plus
        echo "进入 luci-app-passwall-plus 软件包目录..."
        cd feeds/luci/applications/luci-app-passwall-plus
        echo "更新 luci-app-passwall-plus 的子模块..."
        git submodule update --init --recursive
        echo "编译 po2lmo ..."
        cd tools/po2lmo
        make -j${cores:=1}
        sudo make install
        make clean
        echo "编译 TcpRoute2 ..."
        cd ../TcpRoute2
        go get -d -v ./...
        env AR="${target_host}-ar" CC="${target_host}-gcc" CXX="${target_host}-gcc++" CGO_ENABLED=1 GO111MODULE=auto GOOS=${target_host##*-} GOARCH=mipsle go build -ldflags "-s -w" -o tcproute2 #需要修改
        ${target_host}-readelf -d tcproute2
        file tcproute2
        upx --ultra-brute --best -v tcproute2
        mkdir -p /tmp/bin
        mv -f tcproute2 /tmp/bin
        echo "编译 ipt2socks ..."
        cd ../ipt2socks
        make CC=${target_host}-gcc -j${cores:=1}
        ${target_host}-readelf -d ipt2socks
        file ipt2socks
        upx --ultra-brute --best -v ipt2socks
        mv -f ipt2socks /tmp/bin
        make clean
        echo "编译 smartdns ..."
        cd ../smartdns
        mkdir -p /tmp/ssl
        #git clone https://github.com/openssl/openssl
        #cd openssl
        #git submodule update --init --recursive
        echo "下载最新版本openssl..."
        latest_version="$(wget -qO- https://www.openssl.org/source/|grep -oP 'openssl\-\d+\.\d+\.\d+\w+\.tar\.gz' | head -n 1)"
        [ -z ${latest_version} ]&&exit 127
        wget --quiet --continue --show-progress https://www.openssl.org/source/${latest_version}
        [ $? -ne 0 ]&&echo "下载openssl失败!"&&exit 127
        tar -xzf ${latest_version}
        [ $? -ne 0 ]&&echo "解压openssl失败!"&&exit 127
        rm -f ${latest_version}
        cd ${latest_version/.tar.gz/}
        ./Configure \
        no-asm \
        --cross-compile-prefix=${target_host}- \
        --prefix=/tmp/ssl \
        linux-mips32 #需要修改
        make -j${cores:=1}
        make install_sw
        make distclean
        #因为make install乱加sudo试错了一天 https://stackoverflow.com/questions/23078282/ranlib-not-found
        cd ..
        make CFLAGS="-I /tmp/ssl/include" LDFLAGS="-L /tmp/ssl/lib" CC="${target_host}-gcc"
        ${target_host}-strip src/smartdns
        ${target_host}-readelf -d src/smartdns
        file src/smartdns
        upx --ultra-brute --best -v src/smartdns
        mv src/smartdns /tmp/bin        
        ls -l /tmp/bin
        echo "开始编译ipk包..."
        mkdir -p /tmp/ipk
        pushd ${dirn}/${dirn1}        
        ./scripts/feeds update -a
        ./scripts/feeds install luci-app-passwall-plus
        make package/luci-app-passwall-plus/compile -j${cores:=1}
        find bin/ -type f -name "*luci-app-passwall-plus*" | xargs -t -i mv -vf {} /tmp/ipk
        popd
        mkdir -p ../../root/usr/bin
        mv /tmp/bin/* ../../root/usr/bin
        chmod -R +x ../../root/usr/bin
        #opkg print-architecture 查看平台架构
        sed -i "s/PKGARCH:=all/PKGARCH:=$garch/g;s/PKG_RELEASE:=1/PKG_RELEASE:=2/g" ../../Makefile
        pushd ${dirn}/${dirn1}
        make package/luci-app-passwall-plus/compile -j${cores:=1}
        find bin/ -type f -name "*luci-app-passwall-plus*" | xargs -t -i mv -vf {} /tmp/ipk
        popd
        ls -l ../../root/usr/bin
        ls -l /tmp/ipk
        
    - name: Upload artifact
      if: success()
      uses: actions/upload-artifact@master
      with:
        name: luci-app-passwall-plus
        path: /tmp/ipk
        
