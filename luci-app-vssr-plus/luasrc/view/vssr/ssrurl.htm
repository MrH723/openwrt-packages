<%+cbi/valueheader%>
<script type="text/javascript">//<![CDATA[
	function padright(str, cnt, pad) {
		return str + Array(cnt + 1).join(pad);
	}
	function b64EncodeUnicode(str) {
		return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
			return String.fromCharCode('0x' + p1);
		}));
	}
	function b64encutf8safe(str) {
		return b64EncodeUnicode(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, '');
	}
	function b64DecodeUnicode(str) {
		return decodeURIComponent(Array.prototype.map.call(atob(str), function (c) {
			return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
		}).join(''));
	}
	function b64decutf8safe(str) {
		var l;
		str = str.replace(/-/g, "+").replace(/_/g, "/");
		l = str.length;
		l = (4 - l % 4) % 4;
		if (l)
			str = padright(str, l, "=");
		return b64DecodeUnicode(str);
	}
	function b64encsafe(str) {
		return btoa(str).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, '')
	}
	function b64decsafe(str) {
		var l;
		str = str.replace(/-/g, "+").replace(/_/g, "/");
		l = str.length;
		l = (4 - l % 4) % 4;
		if (l)
			str = padright(str, l, "=");
		return atob(str);
	}
	function dictvalue(d, key) {
		var v = d[key];
		if (typeof (v) == 'undefined' || v == '')
			return '';
		return b64decsafe(v);
	}
	function export_ssr_url(btn, urlname, sid) {
		var s = document.getElementById(urlname + '-status');
		if (!s)
			return false;
		var v_server = document.getElementById('cbid.vssr.' + sid + '.server');
		var v_port = document.getElementById('cbid.vssr.' + sid + '.server_port');
		var v_protocol = document.getElementById('cbid.vssr.' + sid + '.protocol');
		var v_method = document.getElementById('cbid.vssr.' + sid + '.encrypt_method');
		var v_obfs = document.getElementById('cbid.vssr.' + sid + '.obfs');
		var v_password = document.getElementById('cbid.vssr.' + sid + '.password');
		var v_obfs_param = document.getElementById('cbid.vssr.' + sid + '.obfs_param');
		var v_protocol_param = document.getElementById('cbid.vssr.' + sid + '.protocol_param');
		var v_alias = document.getElementById('cbid.vssr.' + sid + '.alias');
		var ssr_str = v_server.value + ":" +
				v_port.value + ":" +
				v_protocol.value + ":" +
				v_method.value + ":" +
				v_obfs.value + ":" +
				b64encsafe(v_password.value) +
				"/?obfsparam=" + b64encsafe(v_obfs_param.value) +
				"&protoparam=" + b64encsafe(v_protocol_param.value) +
				"&remarks=" + b64encutf8safe(v_alias.value);
		var textarea = document.createElement("textarea");
		textarea.textContent = "ssr://" + b64encsafe(ssr_str);
		textarea.style.position = "fixed";
		document.body.appendChild(textarea);
		textarea.select();
		try {
			document.execCommand("copy");  // Security exception may be thrown by some browsers.
			s.innerHTML = "<font color='green'><%:Copy SSR to clipboard successfully.%></font>";
		} catch (ex) {
			s.innerHTML = "<font color='red'><%:Unable to copy SSR to clipboard.%></font>";
		} finally {
			document.body.removeChild(textarea);
		}
		return false;
	}

	function import_ssr_url(btn, urlname, sid) {
		var s = document.getElementById(urlname + '-status');
		if (!s)
			return false;
		var ssrurl = prompt("在这里黏贴配置链接 ssr:// | ss:// | vmess:// | trojan://", "");
		if (ssrurl == null || ssrurl == "") {
			s.innerHTML = "<font color='red'>用户取消</font>";
			return false;
		}
		s.innerHTML = "";
		//var ssu = ssrurl.match(/ssr:\/\/([A-Za-z0-9_-]+)/i);
		var ssu = ssrurl.split('://');
		console.log(ssu.length);
		if ((ssu[0] != "ssr" && ssu[0] != "ss" && ssu[0] != "vmess" && ssu[0] != "trojan") || ssu[1] == "") {
			s.innerHTML = "<font color='red'>无效格式</font>";
			return false;
		}

		var event = document.createEvent("HTMLEvents");
		event.initEvent("change", true, true);
		if (ssu[0] == "ssr") {
			var sstr = b64decsafe(ssu[1]);
			var ploc = sstr.indexOf("/?");
			document.getElementById('cbid.vssr.' + sid + '.type').value = "ssr";
			document.getElementById('cbid.vssr.' + sid + '.type').dispatchEvent(event);
			var url0, param = "";
			if (ploc > 0) {
				url0 = sstr.substr(0, ploc);
				param = sstr.substr(ploc + 2);
			}
			var ssm = url0.match(/^(.+):([^:]+):([^:]*):([^:]+):([^:]*):([^:]+)/);
			if (!ssm || ssm.length < 7)
				return false;
			var pdict = {};
			if (param.length > 2)
			{
				var a = param.split('&');
				for (var i = 0; i < a.length; i++) {
					var b = a[i].split('=');
					pdict[decodeURIComponent(b[0])] = decodeURIComponent(b[1] || '');
				}
			}
			document.getElementById('cbid.vssr.' + sid + '.server').value = ssm[1];
			document.getElementById('cbid.vssr.' + sid + '.server_port').value = ssm[2];
			document.getElementById('cbid.vssr.' + sid + '.protocol').value = ssm[3];
			document.getElementById('cbid.vssr.' + sid + '.encrypt_method').value = ssm[4];
			document.getElementById('cbid.vssr.' + sid + '.obfs').value = ssm[5];
			document.getElementById('cbid.vssr.' + sid + '.password').value = b64decsafe(ssm[6]);
			document.getElementById('cbid.vssr.' + sid + '.obfs_param').value = dictvalue(pdict, 'obfsparam');
			document.getElementById('cbid.vssr.' + sid + '.protocol_param').value = dictvalue(pdict, 'protoparam');
			var rem = pdict['remarks'];
			if (typeof (rem) != 'undefined' && rem != '' && rem.length > 0)
				document.getElementById('cbid.vssr.' + sid + '.alias').value = b64decutf8safe(rem);
			s.innerHTML = "<font color='green'>导入ShadowsocksR配置信息成功</font>";
			return false;
		} else if (ssu[0] == "ss") {

			var url0, param = "";
			var sipIndex = ssu[1].indexOf("@");
			var ploc = ssu[1].indexOf("#");
			if (ploc > 0) {
				url0 = ssu[1].substr(0, ploc);
				param = ssu[1].substr(ploc + 1);
			} else {
				url0 = ssu[1];
			}

			if (sipIndex != -1) {
				// SIP002
				var userInfo = b64decsafe(url0.substr(0, sipIndex));
				var temp = url0.substr(sipIndex + 1).split("/?");
				var serverInfo = temp[0].split(":");
				var server = serverInfo[0];
				var port = serverInfo[1];
				var method, password, plugin, pluginOpts;
				if (temp[1]) {
					var pluginInfo = decodeURIComponent(temp[1]);
					var pluginIndex = pluginInfo.indexOf(";");
					var pluginNameInfo = pluginInfo.substr(0, pluginIndex);
					plugin = pluginNameInfo.substr(pluginNameInfo.indexOf("=") + 1)
					pluginOpts = pluginInfo.substr(pluginIndex + 1);
				}

				var userInfoSplitIndex = userInfo.indexOf(":");
				if (userInfoSplitIndex != -1) {
					method = userInfo.substr(0, userInfoSplitIndex);
					password = userInfo.substr(userInfoSplitIndex + 1);
				}
				document.getElementById('cbid.vssr.' + sid + '.type').value = "ss";
				document.getElementById('cbid.vssr.' + sid + '.type').dispatchEvent(event);
				document.getElementById('cbid.vssr.' + sid + '.server').value = server;
				document.getElementById('cbid.vssr.' + sid + '.server_port').value = port;
				document.getElementById('cbid.vssr.' + sid + '.password').value = password || "";
				document.getElementById('cbid.vssr.' + sid + '.encrypt_method_ss').value = method || "";
				document.getElementById('cbid.vssr.' + sid + '.plugin').value = plugin || "";
				document.getElementById('cbid.vssr.' + sid + '.plugin_opts').value = pluginOpts || "";

				if (param != undefined) {
					document.getElementById('cbid.vssr.' + sid + '.alias').value = decodeURI(param);
				}
				s.innerHTML = "<font color='green'>导入Shadowsocks配置信息成功</font>";
			} else {
				var sstr = b64decsafe(url0);
				document.getElementById('cbid.vssr.' + sid + '.type').value = "ss";
				document.getElementById('cbid.vssr.' + sid + '.type').dispatchEvent(event);
				var team = sstr.split('@');
				console.log(param);
				var part1 = team[0].split(':');
				var part2 = team[1].split(':');
				document.getElementById('cbid.vssr.' + sid + '.server').value = part2[0];
				document.getElementById('cbid.vssr.' + sid + '.server_port').value = part2[1];
				document.getElementById('cbid.vssr.' + sid + '.password').value = part1[1];
				document.getElementById('cbid.vssr.' + sid + '.encrypt_method_ss').value = part1[0];
				document.getElementById('cbid.vssr.' + sid + '.plugin').value = "";
				document.getElementById('cbid.vssr.' + sid + '.plugin_opts').value = "";
				if (param != undefined) {
					document.getElementById('cbid.vssr.' + sid + '.alias').value = decodeURI(param);
				}
				s.innerHTML = "<font color='green'>导入Shadowsocks配置信息成功</font>";
			}
			return false;
			} else if (ssu[0] == "trojan") {
			var url0, param = "";
			var ploc = ssu[1].indexOf("#");
			if (ploc > 0) {
				url0 = ssu[1].substr(0, ploc);
				param = ssu[1].substr(ploc + 1);
			} else {
				url0 = ssu[1]
			}
			var sstr = url0;

			document.getElementById('cbid.vssr.' + sid + '.type').value = "trojan";
			document.getElementById('cbid.vssr.' + sid + '.type').dispatchEvent(event);
			var team = sstr.split('@');
			var password = team[0]
			var serverPart = team[1].split(':');
			var others = serverPart[1].split('?');
			var port = others[0]
			var queryParam = {}
			if(others.length > 1) {
				var queryParams = others[1]
				var queryArray = queryParams.split('&')
				for (i = 0; i < queryArray.length; i++) {
					var params = queryArray[i].split('=');
					queryParam[decodeURIComponent(params[0])] = decodeURIComponent(params[1] || '');
				}
			}
			
			document.getElementById('cbid.vssr.' + sid + '.server').value = serverPart[0];
			document.getElementById('cbid.vssr.' + sid + '.server_port').value = port;
			document.getElementById('cbid.vssr.' + sid + '.password').value = password;
			document.getElementById('cbid.vssr.' + sid + '.tls').checked = true;
			document.getElementById('cbid.vssr.' + sid + '.tls').dispatchEvent(event);
			document.getElementById('cbid.vssr.' + sid + '.tls_host').value = queryParam.peer || '';
			document.getElementById('cbid.vssr.' + sid + '.insecure').checked = queryParam.allowInsecure === '1';

			if (param != undefined) {
				document.getElementById('cbid.vssr.' + sid + '.alias').value = decodeURI(param);
			}
			s.innerHTML = "<font color='green'>导入Trojan配置信息成功</font>";
			return false;
		} else if (ssu[0] == "vmess") {
			var sstr = b64DecodeUnicode(ssu[1]);
			var ploc = sstr.indexOf("/?");
			document.getElementById('cbid.vssr.' + sid + '.type').value = "v2ray";
			document.getElementById('cbid.vssr.' + sid + '.type').dispatchEvent(event);
			var url0, param = "";
			if (ploc > 0) {
				url0 = sstr.substr(0, ploc);
				param = sstr.substr(ploc + 2);
			}
			var ssm = JSON.parse(sstr);
			document.getElementById('cbid.vssr.' + sid + '.alias').value = ssm.ps;
			document.getElementById('cbid.vssr.' + sid + '.server').value = ssm.add;
			document.getElementById('cbid.vssr.' + sid + '.server_port').value = ssm.port;
			document.getElementById('cbid.vssr.' + sid + '.alter_id').value = ssm.aid;
			document.getElementById('cbid.vssr.' + sid + '.vmess_id').value = ssm.id;
			document.getElementById('cbid.vssr.' + sid + '.transport').value = ssm.net;
			document.getElementById('cbid.vssr.' + sid + '.transport').dispatchEvent(event);
			if (ssm.net == "tcp") {
			document.getElementById('cbid.vssr.' + sid + '.http_host').value = ssm.host;
			document.getElementById('cbid.vssr.' + sid + '.http_path').value = ssm.path;
			}
			if (ssm.net == "ws") {
			document.getElementById('cbid.vssr.' + sid + '.ws_host').value = ssm.host;
			document.getElementById('cbid.vssr.' + sid + '.ws_path').value = ssm.path;
			}
			if (ssm.net == "h2") {
			document.getElementById('cbid.vssr.' + sid + '.h2_host').value = ssm.host;
			document.getElementById('cbid.vssr.' + sid + '.h2_path').value = ssm.path;
			}
			if (ssm.net == "quic") {
			document.getElementById('cbid.vssr.' + sid + '.quic_security').value = ssm.securty;
			document.getElementById('cbid.vssr.' + sid + '.quic_key').value = ssm.key;
			}
			if (ssm.net == "kcp") {
			document.getElementById('cbid.vssr.' + sid + '.kcp_guise').value = ssm.type;
			}
			if (ssm.tls == "tls") {
			document.getElementById('cbid.vssr.' + sid + '.tls').checked = true;
			document.getElementById('cbid.vssr.' + sid + '.tls').dispatchEvent(event);
			document.getElementById('cbid.vssr.' + sid + '.tls_host').value = ssm.host;
			}
			document.getElementById('cbid.vssr.' + sid + '.mux').checked = true;
			document.getElementById('cbid.vssr.' + sid + '.mux').dispatchEvent(event);
			s.innerHTML = "<font color='green'>导入V2ray配置信息成功</font>";
			return false;
		}
	}
//]]></script>
<input type="button" class="cbi-button cbi-button-apply" value="导入配置信息" onclick="return import_ssr_url(this, '<%=self.option%>', '<%=self.value%>')" />
<input type="button" class="cbi-button cbi-button-apply" value="<%:Export SSR%>" onclick="return export_ssr_url(this,'<%=self.option%>','<%=self.value%>')" /><span id="<%=self.option%>-status"></span>

<span id="<%=self.option%>-status"></span>
<%+cbi/valuefooter%>
