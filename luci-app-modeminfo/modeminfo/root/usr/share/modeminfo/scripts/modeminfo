# (c) 2010-2016 Cezary Jackiewicz <cezary@eko.one.pl>
# (c) 2020-2022 modified by Konstantine Shevlyakov  <shevlakov@132lan.ru>
# (c) 2021 modified by Vladislav Kadulin  <spanky@yandex.ru>


RES="/usr/share/modeminfo"
#GSCRIPT="$RES/scripts/${FAMILY}.txt"

function get_device_info() {
	DEVPORT=$(uci -q get modeminfo.@modeminfo[0].device)
	case $DEVPORT in
		*tty*) continue ;;
		*) get_port ;;
	esac
	modem_family
	GSCRIPT="$RES/scripts/${FAMILY}.at"
	O=$(atinout $GSCRIPT $DEVPORT - |grep -v '^$')
}

function get_port() {
	devices="$(ls /dev/ttyUSB* /dev/ttyACM* /dev/ttyHS* 2>/dev/null | sort -r)"
		for d in $devices; do
			DEVPORT=$d gcom -s $RES/scripts/probeport.gcom > /dev/null 2>&1
			if [ $? = 0 ]; then
				uci set modeminfo.@modeminfo[0].device="$d"
				uci commit modeminfo
				break
			fi
		done
	DEVPORT=$(uci -q get modeminfo.@modeminfo[0].device)
	O=$(atinout $GSCRIPT $DEVPORT - |grep -v '^$')
}

function modem_family() {
	if [ ! -f /tmp/modemdevice ]; then
		F=$(atinout $RES/scripts/family.at $DEVPORT -)
		if (echo ${F} | grep -i que >/dev/null); then
			FAMILY=QUECTEL
		elif (echo ${F} | grep -i sie >/dev/null); then
			FAMILY=SIERRA
		elif (echo ${F} | grep -i dell >/dev/null); then
			FAMILY=DELL
		elif (echo ${F} | grep -i xmm >/dev/null); then
			FAMILY=INTEL
		elif (echo ${F} | grep -i sim >/dev/null); then
			FAMILY=SIMCOM
		elif (echo ${F} | grep -i fib >/dev/null); then
			FAMILY=FIBOCOM
		elif (echo ${F} | grep -i qua >/dev/null); then
			FAMILY=QUALCOMM
		else
			FAMILY=GENERIC
		fi
		echo $FAMILY > /tmp/modemdevice
	else
		FAMILY=$(cat /tmp/modemdevice)
	fi
}

# get CSQ
function get_csq(){
	CSQ=$(echo "$O" | awk -F[,\ ] '/^\+CSQ/ {print $2}')
	[ "x$CSQ" = "x" ] && CSQ=-1
	if [ $CSQ -ge 0 -a $CSQ -le 31 ]; then
		CSQ_PER=$(($CSQ * 100/31))
		CSQ_COL="red"
		[ $CSQ -ge 10 ] && CSQ_COL="red"
		[ $CSQ -ge 15 ] && CSQ_COL="orange"
		[ $CSQ -ge 20 ] && CSQ_COL="green"
		CSQ_RSSI=$((2 * CSQ - 113))
	else 
		CSQ_PER="0"
		CSQ_COL="black"
	fi
}

# Get MCC or MNC 
function get_cops() {
	# COPS
	COPS_NUM=$(echo "$O" | awk -F[\"] '/^\+COPS: .,2/ {print $2}')
	if [ "x$COPS_NUM" != "x" ]; then
		COPS_MCC=${COPS_NUM:0:3}
		COPS_MNC=${COPS_NUM:3:3}
		COPS=$(awk -F[\;] '/'$COPS_NUM'/ {print $2}' $RES/mccmnc.dat)
		if [ "x$COPS" = "x" ]; then
			COPS="$COPS_MCC $COPS_MNC"
		fi
	fi
}

# Get Registration data
function get_reg_data(){
	for CREG in "+CREG" "+CGREG" "+CEREG"; do
		REGST=$(echo "$O" | awk -F[,] '/\'$CREG'/ {print $2}')
		if [ "$REGST" ]; then
			break
		fi
	done
}

function generic_data(){
	TECH=$(echo "$O" | awk -F[,] '/^\+COPS/ {print $4}')
	case "$TECH" in
		2*) MODE="UMTS";;
		0*|3*) MODE="EDGE";;
		4*) MODE="HSDPA";;
		5*) MODE="HSUPA";;
		6*) MODE="HSPA";;
		7*) MODE="LTE";;
		 *) MODE="--";;
	esac
}

# name device via mmcli utility
mmcli_name(){
	MMCLI=$(uci -q get modeminfo.@modeminfo[0].mmcli_name)
	if [ "$MMCLI" -eq "1" ]; then
		if [ -x /usr/bin/mmcli ]; then
			MODEM=$(mmcli -L | awk '{print $1}' | head -1)
			if [ $MODEM ]; then
				MANUF=$(mmcli -m $MODEM -J | jsonfilter -e '@["modem"].*["manufacturer"]' | awk '{gsub("\r", ""); print $0}')
				MODEL=$(mmcli -m $MODEM -J | jsonfilter -e '@["modem"].*["model"]' | awk '{gsub("\r", ""); print $0}')
				if [ -n "$(echo "$MODEL" | grep "${MANUF}")" ]; then
					DEVICE="$MODEL"
				else
					DEVICE="$MANUF $MODEL"
				fi
			fi
		fi
	fi
}


function get_data_in(){
	modem_family
	get_reg_data
	get_cops
	get_csq
	if [ -f "$RES/scripts/${FAMILY}" ]; then
		. $RES/scripts/$FAMILY
		modem_data
	else
		generic_data
	fi
	mmcli_name
}
